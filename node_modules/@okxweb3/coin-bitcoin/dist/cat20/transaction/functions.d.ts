import { EcKeyService } from "../utils";
import { btc, GuardContract, TokenContract, TokenMetadata } from "../common";
import { CAT20State, ChangeInfo, GuardInfo, OpenMinterState, OpenMinterV2State, ProtocolState } from "@cat-protocol/cat-smartcontracts";
import { UTXO } from 'scrypt-ts';
export declare function createGuardContract(ecKey: EcKeyService, feeutxo: UTXO, feeRate: number, tokens: TokenContract[], tokenP2TR: string, changeAddress: btc.Address): {
    commitTx: any;
    contact: GuardContract;
    guardTapScript: string;
};
export declare function unlockToken(ecKey: EcKeyService, tokenContract: TokenContract, tokenInputIndex: number, prevTokenTx: btc.Transaction, preTokenInputIndex: number, prevPrevTokenTx: btc.Transaction, guardInfo: GuardInfo, revealTx: btc.Transaction, minterP2TR: string, txCtx: any, verify: boolean, signature?: string): Promise<boolean>;
export declare function unlockGuard(guardContract: GuardContract, guardInfo: GuardInfo, guardInputIndex: number, newState: ProtocolState, revealTx: btc.Transaction, receiverTokenState: CAT20State, changeTokenState: null | CAT20State, changeInfo: ChangeInfo, txCtx: any, verify: boolean): Promise<boolean>;
export declare function unlockGuardMulti(guardContract: GuardContract, guardInfo: GuardInfo, guardInputIndex: number, newState: ProtocolState, revealTx: btc.Transaction, tokenStates: CAT20State[], tokenIndexes: number[], txCtx: any, verify: boolean): Promise<boolean>;
export declare function createOpenMinterState(mintAmount: bigint, isPriemined: boolean, remainingSupply: bigint, metadata: TokenMetadata, newMinter: number): {
    splitAmountList: bigint[];
    minterStates: OpenMinterState[];
};
export declare function pickOpenMinterStateField<T>(state: OpenMinterState | OpenMinterV2State, key: string): T | undefined;
export declare function getRemainSupply(state: OpenMinterState | OpenMinterV2State, minterMd5: string): bigint | undefined;
export declare function getPremineAddress(minterTx: string): import("scrypt-ts").ByteString;
