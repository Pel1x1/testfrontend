import { btc, GuardContract, TokenPrevTx, TokenMetadata } from "../common";
import { FixedArray } from 'scrypt-ts';
import { CAT20State, GuardInfo, MAX_INPUT } from "@cat-protocol/cat-smartcontracts";
export declare enum UtxoType {
    FEE = "fee",
    GUARD = "guard",
    TOKEN = "token",
    MINTER = "minter",
    SELL = "sell",
    CONTRACT = "contract",
    OP_RETURN = "op_return"
}
export type GuardParams = {};
export type TokenParams = {
    tokenUtxo: string;
    tokenAmount: string;
    tokenReciever: string;
};
export type SellParams = {};
export type BuildInput = {
    txId: string;
    vOut: number;
    amount: number;
    publicKey?: string;
    address?: string;
    type: UtxoType;
    script?: string;
    tokenMetadataIndex?: number;
    previousTxs?: TokenPrevTx;
    contractParams?: string;
    signature?: string;
};
export type BuildOutput = {
    amount: number;
    address?: string;
    script?: string;
    type: UtxoType;
    tokenMetadataIndex?: number;
    contractParams?: string;
};
export interface BuildTxParams {
    tokenMetadatas: string[];
    inputs: BuildInput[];
    outputs: BuildOutput[];
    signedResults?: {
        signedPsbt?: string;
        contractUnlockWitnesses?: string[][];
    };
    verifyScript?: boolean;
}
export type MetadataInfo = {
    metadata: TokenMetadata;
    minterP2TR: string;
    tokenP2TR: string;
    tokenTapScript: string;
    tokenCblock: string;
    inputTokenAmountArray: FixedArray<bigint, typeof MAX_INPUT>;
    tokenStates: CAT20State[];
    tokenIndexes: number[];
    guardContract?: GuardContract;
    guardInfo?: GuardInfo;
};
export type FeePsbtInfo = {
    address: string;
    tapInternalKey: string;
};
export type ContractPsbtInfo = {
    address: string;
    tapScript: string;
    cblock: string;
};
export type PsbtInfo = FeePsbtInfo | ContractPsbtInfo | undefined;
export declare function tx2psbt(tx: btc.Transaction, psbtInfos: PsbtInfo[]): {
    psbt: string;
    toSignInputs: {
        index: number;
        address?: string | undefined;
        publicKey?: string | undefined;
        sighashTypes?: number[] | undefined;
        disableTweakSigner?: boolean | undefined;
    }[];
};
export declare function build(params: BuildTxParams): Promise<any>;
