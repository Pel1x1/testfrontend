import { Buff } from '@cmdcode/buff';
import { sha256 } from './hash.js';
export function create_merkle_proof(leaves, target, encoder = encode_branch) {
    const l = leaves.map(e => Buff.bytes(e).hex);
    const t = Buff.bytes(target).hex;
    const [root, _, path] = merkleize_tree(l, t, [], encoder);
    return {
        root: Buff.hex(root),
        path: path.map(e => Buff.hex(e))
    };
}
export function verify_merkle_proof(path, target, root, encoder = encode_branch) {
    const p = path.map(e => Buff.bytes(e).hex);
    let t = Buff.bytes(target).hex;
    for (const branch of p) {
        t = encoder(t, branch);
    }
    return Buff.is_equal(root, t);
}
export function merkleize_tree(tree, target = null, path = [], encoder = encode_branch) {
    const leaves = [];
    const branches = [];
    if (tree.length < 1) {
        throw new Error('Tree is empty!');
    }
    for (let i = 0; i < tree.length; i++) {
        const leaf = tree[i];
        if (Array.isArray(leaf)) {
            const [r, t, p] = merkleize_tree(leaf, target);
            target = t;
            leaves.push(r);
            for (const e of p) {
                path.push(e);
            }
        }
        else {
            leaves.push(leaf);
        }
    }
    if (leaves.length === 1) {
        return [leaves[0], target, path];
    }
    leaves.sort();
    if (leaves.length % 2 !== 0) {
        leaves.push(leaves[leaves.length - 1]);
    }
    for (let i = 0; i < leaves.length - 1; i += 2) {
        const branch = encoder(leaves[i], leaves[i + 1]);
        branches.push(branch);
        if (typeof target === 'string') {
            if (target === leaves[i]) {
                path.push(leaves[i + 1]);
                target = branch;
            }
            else if (target === leaves[i + 1]) {
                path.push(leaves[i]);
                target = branch;
            }
        }
    }
    return merkleize_tree(branches, target, path);
}
export function encode_branch(a, b) {
    if (b < a) {
        [a, b] = [b, a];
    }
    return sha256(a, b).hex;
}
//# sourceMappingURL=merkle.js.map