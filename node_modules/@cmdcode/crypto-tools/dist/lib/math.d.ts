import { Buff, Bytes } from '@cmdcode/buff';
import { Field } from '@noble/curves/abstract/modular';
export { mod, pow, pow2, invert, } from '@noble/curves/abstract/modular';
export * as pt from './point.js';
export declare const fd: Readonly<import("@noble/curves/abstract/modular").IField<bigint> & Required<Pick<import("@noble/curves/abstract/modular").IField<bigint>, "isOdd">>>;
export declare const GF: typeof Field;
export declare const mod_n: (x: bigint) => bigint;
export declare const mod_p: (x: bigint) => bigint;
export declare const pow_n: (x: bigint, exp: bigint) => bigint;
export declare const sqrt_n: <T>(Fp: import("@noble/curves/abstract/modular").IField<T>, n: T) => T;
export declare const sqrt_p: <T>(Fp: import("@noble/curves/abstract/modular").IField<T>, n: T) => T;
export declare const on_curve: (x: bigint) => boolean;
export declare const in_field: (x: bigint) => boolean;
export declare function mod_bytes(bytes: Bytes): Buff;
//# sourceMappingURL=math.d.ts.map