{"version":3,"file":"browser.js","sources":["../node_modules/@noble/hashes/esm/_assert.js","../node_modules/@noble/hashes/esm/crypto.js","../node_modules/@noble/hashes/esm/utils.js","../node_modules/@noble/hashes/esm/_sha2.js","../node_modules/@noble/hashes/esm/sha256.js","../src/assert.ts","../src/format/str.ts","../node_modules/@scure/base/lib/esm/index.js","../src/encode.ts","../src/format/big.ts","../src/format/num.ts","../src/utils.ts","../src/format/buffer.ts","../src/buff.ts","../src/format/bin.ts"],"sourcesContent":["function number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\n// copied from utils\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\nfunction bytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nfunction hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nexport { number, bool, bytes, hash, exists, output };\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n//# sourceMappingURL=_assert.js.map","export const crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n//# sourceMappingURL=crypto.js.map","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\n// Cast array to different type\nexport const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\n// Cast array to view\nexport const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\n// Other libraries would silently corrupt the data instead of throwing an error,\n// when they don't support it.\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE)\n    throw new Error('Non little-endian hardware is not supported');\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    if (!isBytes(bytes))\n        throw new Error('Uint8Array expected');\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };\nfunction asciiToBase16(char) {\n    if (char >= asciis._0 && char <= asciis._9)\n        return char - asciis._0;\n    if (char >= asciis._A && char <= asciis._F)\n        return char - (asciis._A - 10);\n    if (char >= asciis._a && char <= asciis._f)\n        return char - (asciis._a - 10);\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!isBytes(data))\n        throw new Error(`expected Uint8Array, got ${typeof data}`);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        if (!isBytes(a))\n            throw new Error('Uint8Array expected');\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// For runtime check if class implements interface\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nconst toStr = {}.toString;\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexport function wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport function wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto && typeof crypto.getRandomValues === 'function') {\n        return crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map","import { exists, output } from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nexport class SHA2 extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        exists(this);\n        output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n//# sourceMappingURL=_sha2.js.map","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n//# sourceMappingURL=sha256.js.map",null,null,"/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities\n/**\n * @__NO_SIDE_EFFECTS__\n */\nexport function assertNumber(n) {\n    if (!Number.isSafeInteger(n))\n        throw new Error(`Wrong integer: ${n}`);\n}\nfunction isBytes(a) {\n    return (a instanceof Uint8Array ||\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction chain(...args) {\n    const id = (a) => a;\n    // Wrap call in closure so JIT can inline calls\n    const wrap = (a, b) => (c) => a(b(c));\n    // Construct chain of args[-1].encode(args[-2].encode([...]))\n    const encode = args.map((x) => x.encode).reduceRight(wrap, id);\n    // Construct chain of args[0].decode(args[1].decode(...))\n    const decode = args.map((x) => x.decode).reduce(wrap, id);\n    return { encode, decode };\n}\n/**\n * Encodes integer radix representation to array of strings using alphabet and back\n * @__NO_SIDE_EFFECTS__\n */\nfunction alphabet(alphabet) {\n    return {\n        encode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('alphabet.encode input should be an array of numbers');\n            return digits.map((i) => {\n                assertNumber(i);\n                if (i < 0 || i >= alphabet.length)\n                    throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);\n                return alphabet[i];\n            });\n        },\n        decode: (input) => {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('alphabet.decode input should be array of strings');\n            return input.map((letter) => {\n                if (typeof letter !== 'string')\n                    throw new Error(`alphabet.decode: not string element=${letter}`);\n                const index = alphabet.indexOf(letter);\n                if (index === -1)\n                    throw new Error(`Unknown letter: \"${letter}\". Allowed: ${alphabet}`);\n                return index;\n            });\n        },\n    };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction join(separator = '') {\n    if (typeof separator !== 'string')\n        throw new Error('join separator should be string');\n    return {\n        encode: (from) => {\n            if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))\n                throw new Error('join.encode input should be array of strings');\n            for (let i of from)\n                if (typeof i !== 'string')\n                    throw new Error(`join.encode: non-string input=${i}`);\n            return from.join(separator);\n        },\n        decode: (to) => {\n            if (typeof to !== 'string')\n                throw new Error('join.decode input should be string');\n            return to.split(separator);\n        },\n    };\n}\n/**\n * Pad strings array so it has integer number of bits\n * @__NO_SIDE_EFFECTS__\n */\nfunction padding(bits, chr = '=') {\n    assertNumber(bits);\n    if (typeof chr !== 'string')\n        throw new Error('padding chr should be string');\n    return {\n        encode(data) {\n            if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of data)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.encode: non-string input=${i}`);\n            while ((data.length * bits) % 8)\n                data.push(chr);\n            return data;\n        },\n        decode(input) {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of input)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.decode: non-string input=${i}`);\n            let end = input.length;\n            if ((end * bits) % 8)\n                throw new Error('Invalid padding: string should have whole number of bytes');\n            for (; end > 0 && input[end - 1] === chr; end--) {\n                if (!(((end - 1) * bits) % 8))\n                    throw new Error('Invalid padding: string has too much padding');\n            }\n            return input.slice(0, end);\n        },\n    };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction normalize(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('normalize fn should be function');\n    return { encode: (from) => from, decode: (to) => fn(to) };\n}\n/**\n * Slow: O(n^2) time complexity\n * @__NO_SIDE_EFFECTS__\n */\nfunction convertRadix(data, from, to) {\n    // base 1 is impossible\n    if (from < 2)\n        throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);\n    if (to < 2)\n        throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);\n    if (!Array.isArray(data))\n        throw new Error('convertRadix: data should be array');\n    if (!data.length)\n        return [];\n    let pos = 0;\n    const res = [];\n    const digits = Array.from(data);\n    digits.forEach((d) => {\n        assertNumber(d);\n        if (d < 0 || d >= from)\n            throw new Error(`Wrong integer: ${d}`);\n    });\n    while (true) {\n        let carry = 0;\n        let done = true;\n        for (let i = pos; i < digits.length; i++) {\n            const digit = digits[i];\n            const digitBase = from * carry + digit;\n            if (!Number.isSafeInteger(digitBase) ||\n                (from * carry) / from !== carry ||\n                digitBase - digit !== from * carry) {\n                throw new Error('convertRadix: carry overflow');\n            }\n            carry = digitBase % to;\n            const rounded = Math.floor(digitBase / to);\n            digits[i] = rounded;\n            if (!Number.isSafeInteger(rounded) || rounded * to + carry !== digitBase)\n                throw new Error('convertRadix: carry overflow');\n            if (!done)\n                continue;\n            else if (!rounded)\n                pos = i;\n            else\n                done = false;\n        }\n        res.push(carry);\n        if (done)\n            break;\n    }\n    for (let i = 0; i < data.length - 1 && data[i] === 0; i++)\n        res.push(0);\n    return res.reverse();\n}\nconst gcd = /* @__NO_SIDE_EFFECTS__ */ (a, b) => (!b ? a : gcd(b, a % b));\nconst radix2carry = /*@__NO_SIDE_EFFECTS__ */ (from, to) => from + (to - gcd(from, to));\n/**\n * Implemented with numbers, because BigInt is 5x slower\n * @__NO_SIDE_EFFECTS__\n */\nfunction convertRadix2(data, from, to, padding) {\n    if (!Array.isArray(data))\n        throw new Error('convertRadix2: data should be array');\n    if (from <= 0 || from > 32)\n        throw new Error(`convertRadix2: wrong from=${from}`);\n    if (to <= 0 || to > 32)\n        throw new Error(`convertRadix2: wrong to=${to}`);\n    if (radix2carry(from, to) > 32) {\n        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);\n    }\n    let carry = 0;\n    let pos = 0; // bitwise position in current element\n    const mask = 2 ** to - 1;\n    const res = [];\n    for (const n of data) {\n        assertNumber(n);\n        if (n >= 2 ** from)\n            throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n        carry = (carry << from) | n;\n        if (pos + from > 32)\n            throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n        pos += from;\n        for (; pos >= to; pos -= to)\n            res.push(((carry >> (pos - to)) & mask) >>> 0);\n        carry &= 2 ** pos - 1; // clean carry, otherwise it will cause overflow\n    }\n    carry = (carry << (to - pos)) & mask;\n    if (!padding && pos >= from)\n        throw new Error('Excess padding');\n    if (!padding && carry)\n        throw new Error(`Non-zero padding: ${carry}`);\n    if (padding && pos > 0)\n        res.push(carry >>> 0);\n    return res;\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction radix(num) {\n    assertNumber(num);\n    return {\n        encode: (bytes) => {\n            if (!isBytes(bytes))\n                throw new Error('radix.encode input should be Uint8Array');\n            return convertRadix(Array.from(bytes), 2 ** 8, num);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix.decode input should be array of numbers');\n            return Uint8Array.from(convertRadix(digits, num, 2 ** 8));\n        },\n    };\n}\n/**\n * If both bases are power of same number (like `2**8 <-> 2**64`),\n * there is a linear algorithm. For now we have implementation for power-of-two bases only.\n * @__NO_SIDE_EFFECTS__\n */\nfunction radix2(bits, revPadding = false) {\n    assertNumber(bits);\n    if (bits <= 0 || bits > 32)\n        throw new Error('radix2: bits should be in (0..32]');\n    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\n        throw new Error('radix2: carry overflow');\n    return {\n        encode: (bytes) => {\n            if (!isBytes(bytes))\n                throw new Error('radix2.encode input should be Uint8Array');\n            return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix2.decode input should be array of numbers');\n            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n        },\n    };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction unsafeWrapper(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('unsafeWrapper fn should be function');\n    return function (...args) {\n        try {\n            return fn.apply(null, args);\n        }\n        catch (e) { }\n    };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction checksum(len, fn) {\n    assertNumber(len);\n    if (typeof fn !== 'function')\n        throw new Error('checksum fn should be function');\n    return {\n        encode(data) {\n            if (!isBytes(data))\n                throw new Error('checksum.encode: input should be Uint8Array');\n            const checksum = fn(data).slice(0, len);\n            const res = new Uint8Array(data.length + len);\n            res.set(data);\n            res.set(checksum, data.length);\n            return res;\n        },\n        decode(data) {\n            if (!isBytes(data))\n                throw new Error('checksum.decode: input should be Uint8Array');\n            const payload = data.slice(0, -len);\n            const newChecksum = fn(payload).slice(0, len);\n            const oldChecksum = data.slice(-len);\n            for (let i = 0; i < len; i++)\n                if (newChecksum[i] !== oldChecksum[i])\n                    throw new Error('Invalid checksum');\n            return payload;\n        },\n    };\n}\n// prettier-ignore\nexport const utils = {\n    alphabet, chain, checksum, convertRadix, convertRadix2, radix, radix2, join, padding,\n};\n// RFC 4648 aka RFC 3548\n// ---------------------\nexport const base16 = /* @__PURE__ */ chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\nexport const base32 = /* @__PURE__ */ chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));\nexport const base32hex = /* @__PURE__ */ chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));\nexport const base32crockford = /* @__PURE__ */ chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));\nexport const base64 = /* @__PURE__ */ chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\nexport const base64url = /* @__PURE__ */ chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\nexport const base64urlnopad = /* @__PURE__ */ chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), join(''));\n// base58 code\n// -----------\nconst genBase58 = (abc) => chain(radix(58), alphabet(abc), join(''));\nexport const base58 = /* @__PURE__ */ genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\nexport const base58flickr = /* @__PURE__ */ genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');\nexport const base58xrp = /* @__PURE__ */ genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');\n// xmr ver is done in 8-byte blocks (which equals 11 chars in decoding). Last (non-full) block padded with '1' to size in XMR_BLOCK_LEN.\n// Block encoding significantly reduces quadratic complexity of base58.\n// Data len (index) -> encoded block len\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\nexport const base58xmr = {\n    encode(data) {\n        let res = '';\n        for (let i = 0; i < data.length; i += 8) {\n            const block = data.subarray(i, i + 8);\n            res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');\n        }\n        return res;\n    },\n    decode(str) {\n        let res = [];\n        for (let i = 0; i < str.length; i += 11) {\n            const slice = str.slice(i, i + 11);\n            const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n            const block = base58.decode(slice);\n            for (let j = 0; j < block.length - blockLen; j++) {\n                if (block[j] !== 0)\n                    throw new Error('base58xmr: wrong padding');\n            }\n            res = res.concat(Array.from(block.slice(block.length - blockLen)));\n        }\n        return Uint8Array.from(res);\n    },\n};\nexport const createBase58check = /* @__PURE__ */ (sha256) => chain(checksum(4, (data) => sha256(sha256(data))), base58);\n// legacy export, bad name\nexport const base58check = createBase58check;\nconst BECH_ALPHABET = /* @__PURE__ */ chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction bech32Polymod(pre) {\n    const b = pre >> 25;\n    let chk = (pre & 0x1ffffff) << 5;\n    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n        if (((b >> i) & 1) === 1)\n            chk ^= POLYMOD_GENERATORS[i];\n    }\n    return chk;\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction bechChecksum(prefix, words, encodingConst = 1) {\n    const len = prefix.length;\n    let chk = 1;\n    for (let i = 0; i < len; i++) {\n        const c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126)\n            throw new Error(`Invalid prefix (${prefix})`);\n        chk = bech32Polymod(chk) ^ (c >> 5);\n    }\n    chk = bech32Polymod(chk);\n    for (let i = 0; i < len; i++)\n        chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\n    for (let v of words)\n        chk = bech32Polymod(chk) ^ v;\n    for (let i = 0; i < 6; i++)\n        chk = bech32Polymod(chk);\n    chk ^= encodingConst;\n    return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction genBech32(encoding) {\n    const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n    const _words = radix2(5);\n    const fromWords = _words.decode;\n    const toWords = _words.encode;\n    const fromWordsUnsafe = unsafeWrapper(fromWords);\n    function encode(prefix, words, limit = 90) {\n        if (typeof prefix !== 'string')\n            throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);\n        if (!Array.isArray(words) || (words.length && typeof words[0] !== 'number'))\n            throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);\n        const actualLength = prefix.length + 7 + words.length;\n        if (limit !== false && actualLength > limit)\n            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n        const lowered = prefix.toLowerCase();\n        const sum = bechChecksum(lowered, words, ENCODING_CONST);\n        return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}`;\n    }\n    function decode(str, limit = 90) {\n        if (typeof str !== 'string')\n            throw new Error(`bech32.decode input should be string, not ${typeof str}`);\n        if (str.length < 8 || (limit !== false && str.length > limit))\n            throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);\n        // don't allow mixed case\n        const lowered = str.toLowerCase();\n        if (str !== lowered && str !== str.toUpperCase())\n            throw new Error(`String must be lowercase or uppercase`);\n        str = lowered;\n        const sepIndex = str.lastIndexOf('1');\n        if (sepIndex === 0 || sepIndex === -1)\n            throw new Error(`Letter \"1\" must be present between prefix and data only`);\n        const prefix = str.slice(0, sepIndex);\n        const _words = str.slice(sepIndex + 1);\n        if (_words.length < 6)\n            throw new Error('Data must be at least 6 characters long');\n        const words = BECH_ALPHABET.decode(_words).slice(0, -6);\n        const sum = bechChecksum(prefix, words, ENCODING_CONST);\n        if (!_words.endsWith(sum))\n            throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n        return { prefix, words };\n    }\n    const decodeUnsafe = unsafeWrapper(decode);\n    function decodeToBytes(str) {\n        const { prefix, words } = decode(str, false);\n        return { prefix, words, bytes: fromWords(words) };\n    }\n    return { encode, decode, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };\n}\nexport const bech32 = /* @__PURE__ */ genBech32('bech32');\nexport const bech32m = /* @__PURE__ */ genBech32('bech32m');\nexport const utf8 = {\n    encode: (data) => new TextDecoder().decode(data),\n    decode: (str) => new TextEncoder().encode(str),\n};\nexport const hex = /* @__PURE__ */ chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize((s) => {\n    if (typeof s !== 'string' || s.length % 2)\n        throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\n    return s.toLowerCase();\n}));\n// prettier-ignore\nconst CODERS = {\n    utf8, hex, base16, base32, base64, base64url, base58, base58xmr\n};\nconst coderTypeError = 'Invalid encoding type. Available types: utf8, hex, base16, base32, base64, base64url, base58, base58xmr';\nexport const bytesToString = (type, bytes) => {\n    if (typeof type !== 'string' || !CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (!isBytes(bytes))\n        throw new TypeError('bytesToString() expects Uint8Array');\n    return CODERS[type].encode(bytes);\n};\nexport const str = bytesToString; // as in python, but for bytes only\nexport const stringToBytes = (type, str) => {\n    if (!CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (typeof str !== 'string')\n        throw new TypeError('stringToBytes() expects string');\n    return CODERS[type].decode(str);\n};\nexport const bytes = stringToBytes;\n",null,null,null,null,null,null,null],"names":["bytes","b","lengths","a","Uint8Array","constructor","name","Error","length","includes","exists","instance","checkFinished","destroyed","finished","crypto","globalThis","undefined","createView","arr","DataView","buffer","byteOffset","byteLength","rotr","word","shift","Uint32Array","toBytes","data","str","TextEncoder","encode","utf8ToBytes","Hash","clone","this","_cloneInto","wrapConstructor","hashCons","hashC","msg","update","digest","tmp","outputLen","blockLen","create","SHA2","padOffset","isLE","super","pos","view","len","take","Math","min","set","subarray","process","dataView","roundClean","digestInto","out","output","fill","i","value","setBigUint64","_32n","BigInt","_u32_max","wh","Number","wl","h","l","setUint32","oview","outLen","state","get","res","slice","destroy","to","Maj","c","SHA256_K","IV","SHA256_W","SHA256","A","B","C","D","E","F","G","H","offset","getUint32","W15","W2","s0","s1","T1","T2","sha256","within_size","size","TypeError","is_hex","hex","match","is_safe_num","num","MAX_SAFE_INTEGER","is_prefix","actual","target","JSON","parse","ec","dc","TextDecoder","strToBytes","bytesToStr","decode","hexToBytes","hexstr","endian","hex_size","use_le","ArrayBuffer","char","substring","parseInt","setUint8","bytesToHex","chars","toString","padStart","isBytes","chain","args","id","wrap","map","x","reduceRight","reduce","alphabet","digits","Array","isArray","input","letter","index","indexOf","join","separator","from","split","convertRadix","forEach","d","carry","done","digit","digitBase","isSafeInteger","rounded","floor","push","reverse","gcd","radix2carry","convertRadix2","padding","mask","n","radix2","bits","revPadding","unsafeWrapper","fn","apply","e","base64","chr","end","base64urlnopad","genBase58","abc","base58","base58check","checksum","payload","newChecksum","oldChecksum","BECH_ALPHABET","POLYMOD_GENERATORS","bech32Polymod","pre","chk","bechChecksum","prefix","words","encodingConst","charCodeAt","v","genBech32","encoding","ENCODING_CONST","_words","fromWords","toWords","fromWordsUnsafe","limit","lowered","toLowerCase","toUpperCase","sepIndex","lastIndexOf","sum","endsWith","actualLength","decodeToBytes","decodeUnsafe","bech32","bech32m","Hex","Txt","B58chk","Base64","B64url","Bech32","to_words","to_bytes","Bech32m","_0n","_255n","_256n","bigToBytes","big","big_size","byte","numToBytes","num_size","is_bytes","every","set_buffer","join_array","buff","bigint_replacer","_","bigint_reviver","test","parse_data","data_blob","chunk_size","total_size","count","chunks","idx","buffer_data","util.set_buffer","util.join_array","of","String","Buff","numToBuff","bigToBuff","bin","binToBuff","raw","rawToBuff","strToBuff","hexToBuff","json","jsonToBuff","base64ToBuff","b64url","b64urlToBuff","bech32ToBuff","bech32mToBuff","b58chk","b58chkToBuff","fmt.strToBytes","fmt.bytesToStr","util.is_bytes","util.is_hex","is_equal","random","rand","bytesLength","getRandomValues","randomBytes","now","stamp","Date","fmt.buffer_data","to_num","to_big","to_str","to_hex","to_bin","to_b58chk","to_base64","to_b64url","to_hash","stream","Stream","fmt.bytesToNum","fmt.bytesToBig","fmt.bytesToBin","to_json","reviver","util.bigint_reviver","to_bech32","encoder.Bech32","to_bech32m","encoder.Bech32m","fmt.bytesToHex","encoder.B58chk","encoder.Base64","encoder.B64url","append","equals","prepend","start","array","begin","write","add_varint","calc_varint","toJSON","joined","sort","number","binary","bins","ct","j","fmt.binToBytes","bigint","replacer","util.bigint_replacer","stringify","chk_prefix","assert.is_prefix","util.parse_data","peek","read","chunk","read_varint"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,7]}